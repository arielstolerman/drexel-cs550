Drexel CS550
Assignment 6
############
Group 1:
- Ariel Stolerman
- Bekah Overdorf
- Sam Snodgrass


### summary ###

Extension of the mini-language (that supports lists, our implementation from
assignment 2) to treat procedures as expressions.

### IMPORTANT NOTES ###

In our grammar, the return statement is defined as:
RETURN <expr>
and not:
RETURN ASSIGNOP <expr>

### Files and Descriptions ###

--- General ---

> Makefile
The Makefile utility file for viewing, building and running the code.

> java-cup-11a.jar
Java CUP library

> jflex-1.4.3.jar
Java JFlex library

> interpretertext.cup
The CUP grammar definition input file, produces parser.java and sym.java.
Defines the parser grammar. Added / modified grammar:
- added token for checking if an expression is a procedure and map (PROCP, MAP)
- modified define_statement to be a syntactic sugar for assign_statement (since
  now procs are expressions, so there is no difference)
- added derivation of factor to:
  * proc - as procedures are now expressions (sort of a lambda expression)
  * procp - predicate to check if an expression is a proc (returns 1 if it is,
    0 if not)
  * map - similar to scheme's map, returns a list of values returned by applying
    the proc on the expressions in the given list

> interpretertext.flex
The JFlex tokenizer input file, produces Yylex.java.
Defines the new tokens PROCP and MAP to support the operations mentioned above.

> Program.java
Includes all classes for the mini-language parser AST construction and runtime
evaluation functionality.
Like in assignment 2, Lists and list operations support was added.
Proc is changed to extend Expr, and the old function table is removed; all
variables (which can be integers, lists or procs) are stored in the same symbol
table.
Important classes and functionality:
- Elem: an object that holds an integer value, a list or a proc. Any
  expression is evaluated to an Elem (statements are also evaluated to return
  Elem, but return null)
- ElemType: an enumerator that defines the possible Elem types - number, list
  or proc
- Component: an abstract class that all other classes extend, added to enforce:
  * having a Scope: the scope in which the object is defined / called; this is
    used to propagate to procedures the environment (scope) in which they are
    defined, if static scoping is used
  * eval method - that accepts the symbol table of the enclosing scope
  * setStaticScope method - to set the static scope. Every component sets its
    scope to the given one, and propagates it down to its components, except
    procs: procs propagate down THEMSELVES as they are the new scope to
    transfer further down
- Scope: an interface implemented ONLY by Program and Proc - to allow them be
  defined as possible scopes, i.e. static environments for the objects that are
  defined within them
- ReturnValue: extends RuntimeException, used to throw a proc's return value
  from a return statement up to the apply
- Proc: similar to before, only now extends Expr
- ProcP: a predicate to check if an expression is a proc, as mentioned above
- Map: a map of a list using a proc, similar to scheme, as mentioned above

Static vs. dynamic scoping and environment representation:
- the environment is represented not by a list of frames, but by a single
  "merge" frame, i.e. a single symbol table that contains all variables with
  their "closest" value when looking up the chain of frames. For instance, if
  an environment contains
  frame 0: [x := 1, y :=2]
  frame 1: [x := 4, z := 5]
  in our implementation, on frame 1's level, there will be just one frame that
  is the merge of the two frames, as follows:
  [x := 4, y := 2, z := 5]
  where x is taken from the "closest" frame (therefore it is 4) and y is taken
  since it appears up the list of frames.
- static vs. dynamic scoping:
  everytime a procedure is called, it starts with preparing the call environment
  by copying the relevant scope's symbol table and then evaluate the parameters
  in the calling scope's context. The relevant scope is the part that differs:
  * static scoping: copy the symbol table of the scope in which the procedure
    is DEFINED
  * dynamic scoping: copy the symbol table of the scope in which the procedure
    is CALLED


### Build instructions ###

> make view
Displays all the source files (including cup and flex input files).

> make compile-static, make compile-dynamic, make compile
Create the classes and builds the parser. There is no difference between static
and dynamic build, as that is determined by a command-line argument on run.
A static boolean flag Program.STATIC_SCOPING is set accordingly (default to
static) which determines the scoping rule - static or dynamic.

> make run-static
Runs the parser using static scoping.

> make run-dynamic
Runs the parser using dynamic scoping.

> make clean
Cleans all temporary fies generated during the build process.


### Test ###

> test/
This directory contains test cases with which we tested our project.
The files that test the new functionality of Proc, ProcP and Map are marked (*).
Test files:
- bad_car.p
- bad_cdr.p
- bad_concat.p
- bad_cons1.p
- bad_cons2.p
- bad_if.p
- bad_map.p						(*)
- bad_minus.p
- bad_plus.p
- bad_proc1.p					(*)
- bad_proc2.p					(*)
- bad_proc_only_in_dynamic.p	(*)
- bad_repeat.p
- bad_times.p
- bad_while.p
- good_arith.p
- good_cons.p
- good_list_arith.p
- good_listlen_iter.p
- good_listlen_rec.p
- good_map.p					(*)
- good_proc_as_arg.p			(*)
- good_proc_as_return.p			(*)
- good_proc_nested.p			(*)
- good_proc.p					(*)
- good_proc_stat_vs_dyn.p		(*)
- good_queries.p				(*) includes procp tests
- good_repeat.p
- good_while.p

> test.csh
An executable that runs the code on all the test cases under test/ in both
static and dynamic mode and outputs the results.
In order to run, first chmod +x test.csh
