/* this is the cup file for the mini language
 * for CS550, Assignment 2
 * Modified by Mike Kopack for CS550, 2009 Spring Qtr.
 * Should be at the same level of completeness as the Lecture 2c
 * C++ version.
 *
 * --------------------------------------------------------
 *
 * Group 1 Extension:
 * added support for lists of integers and other such lists
 */

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

action code {:
	/* code inserted into CUP$actions class
	 * it is used by the code embedded the grammar */

	/* hm is used to store and retrieve values of variables */
	public HashMap hm = new HashMap();
	/* var stores the used variable names, this is not necessary
	 * but helpful to dump all the values at the end */
	public LinkedList var = new LinkedList();
        /* ft is used to store and retrieve the functions */
        public HashMap ft = new HashMap();
:}

parser code {:
	
	public static int INDENT = 0;
	public static String ind() {
		String res = "";
		for (int i = 0; i < INDENT; i++)
			res += "  ";
		return res;
	}
	
	/* this part is included in the parser class */
	public static void main (String args[]) throws Exception{
		InputStream is = System.in;
		if (args.length == 2 && args[0].equals("-i"))
			is = new FileInputStream(new File(args[1]));
		new parser(new Yylex(is)).parse();
	}
:}

terminal SEMI, PLUS, MINUS, TIMES, ASSIGN, CONCAT, LPAREN, RPAREN, LBRACKET, RBRACKET;
terminal IF, THEN, ELSE, FI, WHILE, DO, OD, REPEAT, UNTIL;
terminal DEFINE, PROC, END, RETURN;
terminal CONS, CAR, CDR, NULLP, INTP, LISTP;
terminal Integer NUMBER;
terminal COMMA;
terminal String ID;

non terminal Program program;
non terminal StatementList statement_list;
non terminal ParamList param_list;
non terminal ExpressionList expr_list;
non terminal Statement statement, assign_statement, if_statement, while_statement, repeat_statement, define_statement, return_statement;
non terminal Expr expr, term, factor, funcall, list;

/* program */
program ::=
	statement_list:list
	{:
		Program program = new Program(list);
		program.eval(hm, ft, var);
		program.dump(hm, ft, var);
	:};

/* statements */
statement_list ::=
	statement:s
	{:
		RESULT = new StatementList(s);
	:} |
	statement:s SEMI statement_list:sl 
	{:
		/* insert a new statement at the end of the existing statement list */
		sl.insert(s); RESULT = sl;
	:};

statement ::=
	assign_statement:a
	{:
		RESULT = a;
	:} |
	define_statement:d
	{:
		RESULT = d;
	:} |
	if_statement:i
	{:
		RESULT = i;
	:} |
	while_statement:w
	{:
		RESULT = w;
	:} |
	return_statement:rs
	{:
		RESULT = rs;
	:} |
	repeat_statement:r
	{:
		RESULT = r;
	:};

assign_statement ::=
	ID:i ASSIGN expr:e
	{:
		RESULT = new AssignStatement(i,e); 
	:};

define_statement ::=
	DEFINE ID:i PROC LPAREN param_list:pl RPAREN statement_list:sl END
	{:
		RESULT = new DefineStatement(i,new Proc(pl,sl));
	:};

if_statement ::=
	IF expr:e THEN statement_list:s1 ELSE statement_list:s2 FI
	{:
		RESULT = new IfStatement(e,s1,s2);
	:};

while_statement ::=
	WHILE expr:e DO statement_list:s OD
	{:
		RESULT = new WhileStatement(e,s);
	:};

repeat_statement ::=
	REPEAT statement_list:sl UNTIL expr:e
	{:
		RESULT = new RepeatStatement(sl,e);
	:};

return_statement ::=
	RETURN expr:e
	{:
		RESULT = new ReturnStatement(e);
	:};

param_list ::=
	ID:i COMMA param_list:pl
	{:
		RESULT = new ParamList(i,pl);
	:} |
	ID:i
	{:
		RESULT = new ParamList(i);
	:};

/* expressions */

expr ::=
	expr:e PLUS term:t
	{:
		RESULT = new Plus(e,t);
	:} |
	expr:e MINUS term:t
	{:
		RESULT = new Minus(e,t);
	:} |
	list:l1 CONCAT list:l2
	{:
		System.out.println("expr->concat");
		RESULT = new Concat(l1,l2);
	:} |
	term:t
	{:
		System.out.println("expr->term");
		RESULT = t;
	:};

term ::=
	term:t TIMES factor:f
	{:
		RESULT = new Times(t,f);
	:} |
	factor:f
	{:
		System.out.println("term->factor");
		RESULT = f;
	:};

factor ::=
	LPAREN expr:e RPAREN
	{:
		System.out.println("factor->( expr )");
		RESULT = e;
	:} |
	NUMBER:n
	{:
		System.out.println("factor->number");
		RESULT = new Number(n);
	:} |
	ID:i
	{:
		System.out.println("factor->id");
		RESULT = new Ident(i);
	:} |
	funcall:fc
	{:
		System.out.println("factor->funcall");
		RESULT = fc;
	:} |
	CONS LPAREN expr:e COMMA list:l RPAREN
	{:
		System.out.println("factor->cons");
		RESULT = new Cons(e,l);
	:} |
	CAR LPAREN list:l RPAREN
	{:
		System.out.println("factor->car");
		RESULT = new Car(l);
	:} |
	CDR LPAREN list:l RPAREN
	{:
		System.out.println("factor->cdr");
		RESULT = new Cdr(l);
	:} |
	NULLP LPAREN list:l RPAREN
	{:
		System.out.println("factor->nullp");
		RESULT = new NullP(l);
	:} |
	INTP LPAREN expr:e RPAREN
	{:
		System.out.println("factor->intp");
		RESULT = new IntP(e);
	:} |
	LISTP LPAREN expr:e RPAREN
	{:
		System.out.println("factor->listp");
		RESULT = new ListP(e);
	:} |
	list:l
	{:
		System.out.println("factor->list");
		RESULT = l;
	:};

funcall ::=
	ID:i LPAREN expr_list:el RPAREN
	{:
		System.out.println("funcall-> id ( expr_list )");
		RESULT = new FunctionCall(i,el);
	:};

list ::=
	LBRACKET expr_list:el RBRACKET
	{:
		System.out.println("list-> [ expr_list ]");
		RESULT = new Lst(el);
	:} |
	LBRACKET RBRACKET
	{:
		System.out.println("list -> [ ]");
		RESULT = new Lst();
	:};

expr_list ::=
	expr:ex COMMA expr_list:el
	{:
		System.out.println("expr_list -> expr , expr_list");
		RESULT = new ExpressionList(ex,el);
	:} |
	expr:ex
	{:
		System.out.println("expr_list -> expr");
		RESULT = new ExpressionList(ex);
	:};

