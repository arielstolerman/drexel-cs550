     LDA FIVE ;      preparing param 1 for addone call --- Proc: __main__ at line 1 ---
     STA BUFF2 ;
     LDA FP ;
     ADD ONE ;
     STA BUFF1 ;
     LDA BUFF2 ;
     STI BUFF1 ;
     LDA SP ;        store current FP in addone's prev_FP address
     ADD SEVEN ;
     SUB ONE ;
     STA BUFF1 ;
     LDA FP ;
     STI BUFF1 ;
     LDA SP ;        update FP to current SP
     STA FP ;
     LDA SP ;        update SP to current SP + addone's record size
     ADD SEVEN ;
     STA SP ;
     LDA SP ;        set param 1 in addone's record
     SUB ONE ;
     STA BUFF1 ;
     LDI BUFF1 ;
     ADD ONE ;
     STA BUFF1 ;
     LDA FP ;
     ADD ONE ;
     STA BUFF2 ;
     LDI BUFF1 ;
     STI BUFF2 ;
     CAL addone ;    call addone
     LDA SP ;        store addone's return value in BUFF1
     SUB TWO ;
     STA BUFF1 ;
     LDI BUFF1 ;
     STA BUFF1 ;
     LDA SP ;        revert FP
     SUB ONE ;
     STA BUFF2 ;
     LDI BUFF2 ;
     STA FP ;
     LDA BUFF1 ;     now after reverted FP, store addone's return value locally from BUFF1
     STA BUFF2 ;
     LDA FP ;
     ADD TWO ;
     STA BUFF1 ;
     LDA BUFF2 ;
     STI BUFF1 ;
     LDA SP ;        revert SP
     SUB SEVEN ;
     STA SP ;
     LDA FP ;
     ADD TWO ;
     STA BUFF1 ;
     LDI BUFF1 ;
     STA BUFF2 ;
     LDA FP ;
     ADD THREE ;
     STA BUFF1 ;
     LDA BUFF2 ;
     STI BUFF1 ;
     HLT ;
     LDA FP ;        calculate return value --- Proc: addone at line 62 ---
     ADD ONE ;
     STA BUFF1 ;
     LDI BUFF1 ;
     STA BUFF2 ;
     LDA FP ;
     ADD THREE ;
     STA BUFF1 ;
     LDA BUFF2 ;
     STI BUFF1 ;
     LDA ONE ;
     STA BUFF2 ;
     LDA FP ;
     ADD FOUR ;
     STA BUFF1 ;
     LDA BUFF2 ;
     STI BUFF1 ;
     LDA FP ;
     ADD THREE ;
     STA BUFF1 ;
     LDI BUFF1 ;
     STA BUFF2 ;
     LDA FP ;
     ADD FOUR ;
     STA BUFF1 ;
     LDI BUFF1 ;
     ADD BUFF2 ;
     STA BUFF2 ;
     LDA FP ;
     ADD FIVE ;
     STA BUFF1 ;
     LDA BUFF2 ;
     STI BUFF1 ;
     LDA FP ;
     ADD FIVE ;
     STA BUFF1 ;
     LDI BUFF1 ;     backup return value in BUFF1
     STA BUFF1 ;
     LDA SP ;        calculate return value address and store in BUFF2
     SUB TWO ;
     STA BUFF2 ;
     LDA BUFF1 ;     finally store return value (BUFF1) in designated address
     STI BUFF2 ;
     LDI SP ;        jump back to caller
     STA BUFF1 ;
     JMI BUFF1 ;
