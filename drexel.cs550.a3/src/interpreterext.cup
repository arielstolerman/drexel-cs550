/* this is the cup file for the mini language
 * for CS550, Assignment 2
 * Modified by Mike Kopack for CS550, 2009 Spring Qtr.
 * Should be at the same level of completeness as the Lecture 2c
 * C++ version.
 */

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:

	/* this part is included in the parser class */
	public static void main (String args[]) throws Exception{
		try
		{
			InputStream is = System.in;
			if (args.length == 2 && args[0].equals("-i"))
				is = new FileInputStream(new File(args[1]));
			new parser(new Yylex(is)).parse();
		}
		catch(Exception ex)
		{
			System.out.println("Exception: " + ex.getMessage());
			System.exit(-1);
		}
	}
:}

terminal SEMI, PLUS, MINUS, TIMES, ASSIGN, LPAREN, RPAREN;
terminal IF, THEN, ELSE, FI, WHILE, DO, OD, REPEAT, UNTIL;
terminal Integer NUMBER;
terminal COMMA;
terminal String ID;

non terminal Program program;
non terminal StatementList statement_list;
non terminal Statement statement, assign_statement, if_statement, while_statement, repeat_statement;
non terminal Expr expr, term, factor;

program ::= statement_list:list
	    {: Program program = new Program(list);
	       program.compile();
	       program.dump();
	     :};

statement_list ::= statement:s
		    {: RESULT = new StatementList(s); :}
		  | statement:s SEMI statement_list:sl 
		    {: /* insert a new statement at the end of the existing statement list */
		       sl.insert(s); RESULT = sl; :};

statement ::=
		assign_statement:a
	      {: RESULT = a; :}
	    | if_statement:i
	      {: RESULT = i; :}
	    | while_statement:w
	      {: RESULT = w; :}
        | repeat_statement:r
          {: RESULT = r; :};

assign_statement ::= ID:i ASSIGN expr:e
		     {: RESULT = new AssignStatement(i,e); 
		     :};

if_statement ::= IF expr:e THEN statement_list:s1 ELSE statement_list:s2 FI
		 {: RESULT = new IfStatement(e,s1,s2); :};

while_statement ::= WHILE expr:e DO statement_list:s OD
		 {: RESULT = new WhileStatement(e,s); :};

repeat_statement ::= REPEAT statement_list:sl UNTIL expr:e
                 {: RESULT = new RepeatStatement(sl,e); :};

expr ::= expr:e PLUS term:t
	 {: RESULT = new Plus(e,t); :}
       | expr:e MINUS term:t
	 {: RESULT = new Minus(e,t); :}
       | term:t
	 {: RESULT = t; :};

term ::= term:t TIMES factor:f
         {: RESULT = new Times(t,f); :}
       | factor:f
	 {: RESULT = f; :};

factor ::= LPAREN expr:e RPAREN
	   {: RESULT = e; :}
	 | NUMBER:n
	   {: RESULT = new Number(n); :}
	 | ID:i
	   {: RESULT = new Ident(i); :};
