Drexel CS550
Assignment 3
############
Group 1:
- Ariel Stolerman
- Bekah Overdorf
- Sam Snodgrass


### summary ###

A compiler for the mini-language (does not support lists or functions).


### Files and Descriptions ###

> Makefile
The Makefile utility file for viewing, building and running the code.

> java-cup-11a.jar
Java CUP library

> jflex-1.4.3.jar
Java JFlex library

> interpretertext.cup
The CUP grammar definition input file, produces parser.java and sym.java.
Defines the parser grammar.

> interpretertext.flex
The JFlex tokenizer input file, produces Yylex.java.

> Program.java
Includes all classes for the mini-language parser AST construction and
compilation functionality.
Important added/modified classes and enums:
- SymbolType: enum for defining a type of value in the symbol table: constant,
  temporary, variable or a label
- SymbolValue: class for a value entry in the symbol table. Includes the
  type, value (may be null) and address (may be null)
- InstructionType: enum for different RAL instructions (LDA, STA etc.)
- Instruction: class for a RAL instruction, constructed of optional label,
  instruction and argument
- Component: an abstract class extended by Expr, Statement and StatementList
  to impose implementation of a translate method
- Program:
  The Program class is modified to provide several sets of methods:
  1) compile methods: includes the translate and optimize methods, both called
     by the compile method (two copies of translated instructions and symbol
     table are maintained - non-optimized and optimized).
     The translate and optimize methods also call link, which sets the address
     field of each symbol in the symbol table.
  2) dump to file methods: allow dumping the instructions (optimized or not)
     to files, either in a symbolic or linked representation.
     Linked representation will create the corresponding memory files.
  3) output methods: same as the dump methods, only output to the standard
     output.


### Build instructions ###

> view

> compile

> view-trans

> view-link

> view-op

> run

> run-op

> clean





> make view-part1
Displays all the source files (including cup and flex input files) for part1.

> make
Builds the entire project, both part1 and part2 (defined by the 'build' label).

> make run-part1
Runs the parser for part1.

> make view-func1
Prints the mini-language implementation of the iterative list-length function.

> make view-func2
Prints the mini-language implementation of the recursive list-length function.

> make view-part2
Displays all the source files (including cup and flex input files) for part2.
The cup and flex files do not differ from part1.

> make run-part2
Runs the parser for part2.

> make clean
Cleans all temporary fies generated during the build process.


### Test ###

> test/
This directory contains (some of the) test cases with which we tested our project.
Test files:
- bad_car.p
- bad_cdr.p
- bad_concat.p
- bad_cons1.p
- bad_cons2.p
- bad_if.p
- bad_minus.p
- bad_plus.p
- bad_repeat.p
- bad_times.p
- bad_while.p
- good_arith.p
- good_cons.p
- good_list_arith.p
- good_queries.p
- good_repeat.p
- good_while.p

> test.csh
An executable that runs part1 and part2 on all the test cases under test/ and
outputs the results.
In order to run, first chmod +x test.csh
