/* this is the cup file for the mini language
 * for CS550, Assignment 2
 * Modified by Mike Kopack for CS550, 2009 Spring Qtr.
 * Should be at the same level of completeness as the Lecture 2c
 * C++ version.
 *
 * --------------------------------------------------------
 *
 * Group 1 Extension:
 * added support for lists, procs as expressions and classes (with inheritance)
 */

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
	
	/* this part is included in the parser class */
	public static void main (String args[]) throws Exception
	{
		// parse arguments
		String path = null;
		for (int i = 0; i < args.length; i++) {
			if (args[i].equals("-i") && i < args.length - 1)
				path = args[i + 1];
			else if (args[i].equals("-s"))
				Program.STATIC_SCOPING = true;
			else if (args[i].equals("-d"))
				Program.STATIC_SCOPING = false;
		}
		
		// parse
		try
		{
			InputStream is = System.in;
			if (path != null)
				is = new FileInputStream(new File(path));
			new parser(new Yylex(is)).parse();
		}
		catch(RuntimeException ex)
		{
			System.out.println("Runtime Exception: " + ex.getMessage());
			System.exit(-1);
		}
		catch(Exception ex)
		{
			System.out.println("Exception: " + ex.getMessage());
			System.exit(-1);
		}
	}
:}

terminal SEMI, PLUS, MINUS, TIMES, ASSIGN, LPAREN, RPAREN;
terminal CONCAT, LBRACKET, RBRACKET;
terminal IF, THEN, ELSE, FI, WHILE, DO, OD, REPEAT, UNTIL;
terminal DEFINE, PROC, PROCP, MAP, END, RETURN;
terminal CONS, CAR, CDR, NULLP, INTP, LISTP;
terminal CLASS, COLON, DOT;
terminal Integer NUMBER;
terminal COMMA;
terminal String ID;

non terminal Program program;
non terminal StatementList stmt_list;
non terminal ParamList param_list;
non terminal ExpressionList expr_list;
non terminal Statement stmt, assign_stmt, if_stmt, while_stmt, repeat_stmt;
non terminal Statement define_stmt, return_stmt, class_stmt, expr_stmt;
non terminal Expr expr, term, factor, proc, funcall, list, map, dotcall;

/* program */
program ::=
	stmt_list:list
	{:
		Program program = new Program(list);
		program.eval();
		program.dump();
	:};

/* stmts */
stmt_list ::=
	stmt:s
	{:
		RESULT = new StatementList(s);
	:} |
	stmt:s SEMI stmt_list:sl 
	{:
		/* insert a new stmt at the end of the existing stmt list */
		sl.insert(s); RESULT = sl;
	:};

stmt ::=
	assign_stmt:a
	{:
		RESULT = a;
	:} |
	define_stmt:d
	{:
		RESULT = d;
	:} |
	if_stmt:i
	{:
		RESULT = i;
	:} |
	while_stmt:w
	{:
		RESULT = w;
	:} |
	return_stmt:rs
	{:
		RESULT = rs;
	:} |
	repeat_stmt:r
	{:
		RESULT = r;
	:} |
	class_stmt:c
	{:
		RESULT = c;
	:} |
	expr_stmt:e
	{:
		RESULT = new ExprStatement(e);
	:};

assign_stmt ::=
	ID:i ASSIGN expr:e
	{:
		RESULT = new AssignStatement(i,e); 
	:};

define_stmt ::=
	DEFINE ID:i expr:e
	{:
		// syntactic sugar for assign stmt, since now procedures are exps
		RESULT = new AssignStatement(i,e);
		//RESULT = new DefineStatement(i,new Proc(pl,sl));
	:};

if_stmt ::=
	IF expr:e THEN stmt_list:s1 ELSE stmt_list:s2 FI
	{:
		RESULT = new IfStatement(e,s1,s2);
	:};

while_stmt ::=
	WHILE expr:e DO stmt_list:s OD
	{:
		RESULT = new WhileStatement(e,s);
	:};

repeat_stmt ::=
	REPEAT stmt_list:sl UNTIL expr:e
	{:
		RESULT = new RepeatStatement(sl,e);
	:};

return_stmt ::=
	RETURN expr:e
	{:
		RESULT = new ReturnStatement(e);
	:};

param_list ::=
	ID:i COMMA param_list:pl
	{:
		RESULT = new ParamList(i,pl);
	:} |
	ID:i
	{:
		RESULT = new ParamList(i);
	:};

class_stmt ::=
	CLASS ID:i LPAREN param_list:pl RPAREN COLON ID:s stmt_list:sl END
	{:
		RESULT = new Class(i, s, pl, sl);
	:} |
	CLASS ID:i LPAREN RPAREN COLON ID:s stmt_list:sl END
	{:
		RESULT = new Class(i, s, sl);
	:} |
	CLASS ID:i LPAREN param_list:pl RPAREN stmt_list:sl END
	{:
		RESULT = new Class(i, pl, sl);
	:} |
	CLASS ID:i LPAREN RPAREN stmt_list:sl END
	{:
		RESULT = new Class(i, sl);
	:};

expr_stmt ::=
	expr:e
	{:
		RESULT = e;
	:};

/* expressions */

expr ::=
	expr:e PLUS term:t
	{:
		RESULT = new Plus(e,t);
	:} |
	expr:e MINUS term:t
	{:
		RESULT = new Minus(e,t);
	:} |
	expr:l1 CONCAT term:l2
	{:
		RESULT = new Concat(l1,l2);
	:} |
	term:t
	{:
		RESULT = t;
	:};

term ::=
	term:t TIMES factor:f
	{:
		RESULT = new Times(t,f);
	:} |
	factor:f
	{:
		RESULT = f;
	:};

factor ::=
	LPAREN expr:e RPAREN
	{:
		RESULT = e;
	:} |
	NUMBER:n
	{:
		RESULT = new Number(n);
	:} |
	ID:i
	{:
		RESULT = new Ident(i);
	:} |
	proc:p
	{:
		RESULT = p;
	:} |
	PROCP LPAREN expr:e RPAREN
	{:
		RESULT = new ProcP(e);
	:} |
	map:m
	{:
		RESULT = m;
	:} |
	funcall:fc
	{:
		RESULT = fc;
	:} |
	CONS LPAREN expr:e COMMA expr:l RPAREN
	{:
		RESULT = new Cons(e,l);
	:} |
	CAR LPAREN expr:l RPAREN
	{:
		RESULT = new Car(l);
	:} |
	CDR LPAREN expr:l RPAREN
	{:
		RESULT = new Cdr(l);
	:} |
	NULLP LPAREN expr:l RPAREN
	{:
		RESULT = new NullP(l);
	:} |
	INTP LPAREN expr:e RPAREN
	{:
		RESULT = new IntP(e);
	:} |
	LISTP LPAREN expr:e RPAREN
	{:
		RESULT = new ListP(e);
	:} |
	list:l
	{:
		RESULT = l;
	:} |
	dotcall:d
	{:
		RESULT = d;
	:};

proc ::=
	PROC LPAREN param_list:pl RPAREN stmt_list:sl END
	{:
		RESULT = new Proc(pl,sl);
	:};

map ::=
	MAP LPAREN expr:p COMMA expr:l RPAREN
	{:
		RESULT = new Map(p,l);
	:};

funcall ::=
	ID:i LPAREN expr_list:el RPAREN
	{:
		RESULT = new FunctionCall(i,el);
	:};

list ::=
	LBRACKET expr_list:el RBRACKET
	{:
		RESULT = new Lst(el);
	:} |
	LBRACKET RBRACKET
	{:
		RESULT = new Lst();
	:};

expr_list ::=
	expr:ex COMMA expr_list:el
	{:
		RESULT = new ExpressionList(ex,el);
	:} |
	expr:ex
	{:
		RESULT = new ExpressionList(ex);
	:};

dotcall ::=
	expr:e DOT funcall:f
	{:
		RESULT = new DotCall(e,f);
	:} |
	expr:e DOT ID:a
	{:
		RESULT = new DotCall(e,a);
	:};
